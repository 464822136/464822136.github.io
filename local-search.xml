<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux权限认识</title>
    <link href="undefined2020/02/08/Linux%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%86/"/>
    <url>2020/02/08/Linux%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1.文件类型"></a>1.文件类型</h3><p>Linux文件类型有五种：</p><p>普通文件、链接文件、字符文件、目录文件、块文件</p><p><img src="fileInfo.png" srcset="undefined" alt></p><p>上面是三种Linux文件格式其中不包含字符文件</p><p>每种文件有不同的表现方式</p><p>普通文件用一个-表示</p><p><img src="commonFile.png" srcset="undefined" alt></p><p>链接文件用l（link）表示</p><p><img src="linkFile.png" srcset="undefined" alt></p><p>字符文件用c 表示</p><p>这里就不提供图片了。</p><p>目录文件用d（derectory）表示</p><p><img src="decretoryFile.png" srcset="undefined" alt></p><p>块文件用b（block） 表示</p><h3 id="2-文件权限"><a href="#2-文件权限" class="headerlink" title="2.文件权限"></a>2.文件权限</h3><p><img src="ls.png" srcset="undefined" alt></p><p>现在说一下文件格式后面的r w x分别是什么意思，但为什么会有这么多rwx呢？</p><p>因为linux是多用户操作系统所以每个文件都具备他自己或者其他用户的权限</p><p>然后就会有三组,每一组用三个-来表示权限：</p><p>1.第一组是文件所有者用户权限</p><p>2.第二组是文件所在组用户权限</p><p>3.第三组是文件其他组用户权限</p><p>r: 可读(4) w:可写(2) x:可执行(1)</p><p>括号里的数字也可以代表权限</p><p>紧跟在权限后面的是一个数字</p><p><img src="number.png" srcset="undefined" alt></p><p>这个数字根据文件类型来显示的</p><p>文件格式为目录的话它将会显示目录下有多少个子目录也会包括隐藏目录 . ..这两目录</p><p>. 表示当前目录  .. 表示上一级目录  通常用cd使用跳转</p><p>文件格式为文件的话显示文件硬链接数量</p><p><br></p><p><br></p><p><img src="myFileAndFileGroup.png" srcset="undefined" alt></p><p>数字后面接着的是文件所有者，后面再是文件所在组。</p><p>然后他们的后面又接着一个数字这个表示该文件大小</p><p>文件和目录显示有所不同</p><p>文件显示自己的字节大小</p><p>本文章根据尚硅谷韩顺平老师的Linux课程学习并撰写加深印象</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity自定义资源认证</title>
    <link href="undefined2020/01/24/SpringSecurity%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%AE%A4%E8%AF%81/"/>
    <url>2020/01/24/SpringSecurity%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>实现自定义资源认证步骤分为两步</p><h4>1.过滤器拦截</h4><p>​    1.1首先自定义一个类实现SpringSecurity提供的 FilterInvocationSecurityMetadataSource 接口重写三个方法</p><p>​    <img src="SecurityMetadataSource.png" srcset="undefined" alt></p><p>​    主要写第一个方法的逻辑就可以实现自定义的资源认证</p><p>​    <img src="getAttributes.png" srcset="undefined" alt></p><p>​    方法中的参数就是SpringSecurity封装了HttpServletRequest、HttpServletResponse、FilterChain的    一个类</p><p>​    <img src="FilterInvocation.png" srcset="undefined" alt></p><p>回到上面getAttributes方法</p><h4>1.2.1通过Request获取到请求的资源（地址）</h4><p>​        获取到请求的地址做什么？</p><p>​        这里这个方法的作用是将请求的资源所需要的权限返回去出去，需要用SpringSecurtiy提供的类封装好，</p><p>​        然后这个资源的需要的权限不一定只是一个所以是一个集合。</p><p>1.2.2通过请求的地址查询出需要的权限封装好并返回集合</p><p>​        下一步就是判断这个请求地址的权限在我们已认证的权限中有没有这个权限</p><h4>2.自定义权限决策器</h4><p>   SpringSecurity默认的决策器有三个分别是：</p><p>​    <img src="defaultDecide.jpg" srcset="undefined" alt></p><p>​    这里的票数应该是指权限的通过次数，比如访问个菜单或者按钮，他们需要三个权限，而登录的用户只有两个    权限那么就会有两票</p><p>​    因为我们是自定义决策器所以实现SpringSecurity提供的接口就好了</p><h4>AccessDecisionManager</h4><p></p><p>   也是三个方法</p><p>​    <img src="AccessDecisionManager.png" srcset="undefined" alt></p><p>主要写第一个方法的逻辑就好了，下面介绍了该方法的三个参数</p><p>Authentication var1: 封装了一些认证的信息</p><p>Object var2: 目前还没用到</p><p>Collection<configattribute> var3: 这参数是FilterInvocationSecurityMetadataSource 的getAttributes(Object o)返回过来的集合参数，也就是请求的地址所需要的权限用现在自定义决策器来验证该用户是否有权限</configattribute></p><p><img src="decide.png" srcset="undefined" alt></p><p>这里可根据自己的逻辑进行判断</p><p>接下来核心都写好了，但是还没指定用他们</p><p>在自定义类继承<strong>WebSecurityConfigurerAdapter</strong>的configure(HttpSecurity http)的方法中使用他们</p><p><img src="configure.png" srcset="undefined" alt></p><p>以上自定义资源认证来自个人理解，还请大佬们多多指教，不喜勿喷。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇内容</title>
    <link href="undefined2019/05/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%86%85%E5%AE%B9/"/>
    <url>2019/05/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>第一个博客，经过三番五次的安装，终于配的像个样子了。然后步入正题</p><p>1、使用 git clone 主题连接 放到 themes/主题名 然后把 _config.yml的theme改成下载的主题名    </p><p>2、到github下载主题下载完成后解压到themes之后也把 _config.yml themes改成下载好的名字</p>]]></content>
    
    
    <categories>
      
      <category>初尝</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>